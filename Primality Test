################## Eratosthenes###################  # time complexity ==>  O( n log (log n))  [10**6 까지 빠르게 구함]
2 -> 4~n ++2 , 3-> 3~n ++3 ~~~~     @ 범위가 작고 대량의 소수들을 직접 구하는 경우

def era(n):                                   def era(n)
    d = [True]*n                                  d = [0,0,2]+[i for i in range(3,n)]
    for i in range(2,(n**0.5)+1):                 for i in range(2,(n**0.5)+1):
        if d[i]:                                      if d[i]:
        for j in range(i+i,n,i):                      for j in range(i+i,n,i):
            d[i] = False                                  d[i] = 0
    return [i for i in range(2,n) if d[i]]        return sorted(list(set(d)-set([0])))


############################## Miller - Rabin  #####################################################
# time complexity ==>  O( k log3 n )  *k: 반복횟수, n: 소수를 검사할 숫자 
                                      # 위키피디아에 FFT (고속 푸리에 변환) 을 사용하면  k log2 n 까지 가능하다함 (다음에 게시)
#참고  http://ko.wikipedia.org/wiki/%EB%B0%80%EB%9F%AC-%EB%9D%BC%EB%B9%88_%EC%86%8C%EC%88%98%ED%8C%90%EB%B3%84%EB%B2%95

@ Fermat's little theorem     
# 참고 http://ko.wikipedia.org/wiki/%ED%8E%98%EB%A5%B4%EB%A7%88_%EC%86%8C%EC%A0%95%EB%A6%AC
 (이 파일은 공부용이기 때문에 가시성이 떨어지므로 정리가 잘된 블로그 참고)
   
   a^p ≡ a (mod p)      *p : 소수 , a : 정수
   a^(p−1) ≡ 1 (mod p)    서로 합동   
                               그리고  a^2 ≡ 1 (mod p) ==>  a ≡ 1 (mod p)  or  a ≡ -1 (mod p)  ) extra thorem
                                         ↓↓↓
                                   (a^2)-1 ≡ 0 (mod p)  ==> (a+1)(a-1) ≡ 0 (mod p) => (a+1) or (a-1) 중 하나는 p의 배수
   
ex) (N-1 을 홀수가 될때까지 2로 나눔)
  
   N - 1 = (2^r)*d    *N : 2가 아닌 소수 (=> N-1 짝수)
     | | 
     ▽▽(Fermat)
     a^(N-1) ≡ 1 (mod N)
     a^((2^r)*d) ≡ 1 (mod N)   ==> a^(((2^r))-1)*d) * a^(((2^r))-1)*d) ≡ 1 (mod N) ==>  (a^((2^(r-1))*d))^2 ≡ 1 (mod N)
     
     ==>  (extra thorem)  a^(2^(r-1))*d ≡ 1 (mod N)  or  a^(2^(r-1))*d ≡ -1 (mod N)
   
     ==>  a^d ≡ 1 (mod N)  /  a^(d*2^s) ≡ -1 (mod N)  [0<s<=r]
  
  
  def miller_labin(n,a):  # n == prime / return true
    if not a%n: return False
    k = n-1
    while True:
        tmp = pow(a,k,n)
        if tmp==n-1: return True # a^(n-1)= -1 (mod n)
        if k%2: return tmp==1
        k//=2

####################################### O (sqrt n) ###############################################  
def Isprime(n):
    if n<=2 or n%2==0: return n==2
    for i in range(3,(n**0.5)+1,2):
        if n%i==0: return False
    return True
